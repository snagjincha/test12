
---
title: "NYC Taxi 데이터"
author: "차상진"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---
```{python}
scatter_data = px.scatter_mapbox(
    data_frame=df_small2,
    lat='latitude',
    lon='longitude',
    size='passenger_count',
    size_max=10,
    color='speedy',
    mapbox_style='carto-positron',
    zoom=11,
    width=750,
    height=600    
)

# Add scatter data to fig3 and update names
for trace in scatter_data.data:
    trace.name = f'{trace.name} (pickup/dropoff)'
    fig3.add_trace(trace)

# Update line traces, not scatter traces
fig3.update_traces(
    line={'width': 1},
    opacity=0.8,
    selector={'type': 'scattermapbox'}  # This selector is incorrect; it should target line traces
)

# Show fig3 without scrollZoom
fig3.show(config={'scrollZoom': False})

```


# 기말고사1-(1),(2)
```{python}
#| title: 요일, 시간에 따른 평균속력 시각화
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"
df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)
week_dct = {0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'}
_df = df.copy()
df1 = _df.loc[:,['speed','pickup_hour','dayofweek']].groupby(['pickup_hour','dayofweek']).agg('mean')\
.reset_index().sort_values('dayofweek').reset_index(drop=True)
df1.dayofweek = df1.dayofweek.map(week_dct)
df1
fig = px.density_heatmap(
    data_frame=df1,
    x='pickup_hour',
    y='dayofweek',
    z='speed',
    nbinsx=24,
    nbinsy=7,
    height=300
)
fig['layout']['coloraxis']['colorbar']['title']['text'] = '평균속력'
fig['layout']['xaxis']['title']['text'] = 'pickup 시간'
fig['layout']['yaxis']['title']['text'] = '요일'
fig.show()
```

```{python}
#| title: 요일, 시간에 따른 평균이동거리 시각화

df2 = _df.loc[:,['pickup_hour','dayofweek','dist']]\
.groupby(['pickup_hour','dayofweek']).agg('mean').reset_index()\
.sort_values('dayofweek').reset_index(drop=True).rename({'dist':'dist_mean'},axis=1)
df2.dayofweek = df2.dayofweek.map(week_dct)
df2
fig = px.density_heatmap(
    data_frame=df2,
    x='pickup_hour',
    y='dayofweek',
    z='dist_mean',
    nbinsx=24,
    nbinsy=7,
    height=300
)
fig['layout']['coloraxis']['colorbar']['title']['text'] = '평균이동거리'
fig['layout']['xaxis']['title']['text'] = 'pickup 시간'
fig['layout']['yaxis']['title']['text'] = '요일'
fig.show()
```
# 기말고사 1-(3)


```{python}
#| title: 요일, 시간에 따른 속력별 경로 시각화

# Add scatter data to fig3 and update names
for trace in scatter_data.data:
    trace.name = f'{trace.name} (pickup/dropoff)'
    fig3.add_trace(trace)

# Update line traces, not scatter traces
fig3.update_traces(
    line={'width': 1},
    opacity=0.8,
    selector={'type': 'scattermapbox'}  # This selector is incorrect; it should target line traces
)

# Show fig3 without scrollZoom
fig3.show()

```