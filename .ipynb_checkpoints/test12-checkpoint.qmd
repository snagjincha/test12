---
title: "에너지사용량 자료 분석"
author: "차상진"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---

# 기말고사1-(1),(2)
```{python}
#| title: 요일,시간에 따른 평균속력 시각화
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"

df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)

week_dct = {0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'}
_df = df.copy()

df1 = _df.loc[:,['speed','pickup_hour','dayofweek']].groupby(['pickup_hour','dayofweek']).agg('mean')\
.reset_index().sort_values('dayofweek').reset_index(drop=True)
df1.dayofweek = df1.dayofweek.map(week_dct)

fig = px.density_heatmap(
    data_frame=df1,
    x='pickup_hour',
    y='dayofweek',
    z='speed',
    nbinsx=24,
    nbinsy=7,
    height=300
)
fig['layout']['coloraxis']['colorbar']['title']['text'] = '평균속력'
fig['layout']['xaxis']['title']['text'] = 'pickup 시간'
fig['layout']['yaxis']['title']['text'] = '요일'
fig.show()
```

```{python}
#| title: 요일,시간에 따른 평균이동거리 시각화
df2 = _df.loc[:,['pickup_hour','dayofweek','dist']]\
.groupby(['pickup_hour','dayofweek']).agg('mean').reset_index()\
.sort_values('dayofweek').reset_index(drop=True).rename({'dist':'dist_mean'},axis=1)
df2.dayofweek = df2.dayofweek.map(week_dct)

fig = px.density_heatmap(
    data_frame=df2,
    x='pickup_hour',
    y='dayofweek',
    z='dist_mean',
    nbinsx=24,
    nbinsy=7,
    height=300
)
fig['layout']['coloraxis']['colorbar']['title']['text'] = '평균이동거리'
fig['layout']['xaxis']['title']['text'] = 'pickup 시간'
fig['layout']['yaxis']['title']['text'] = '요일'
fig.show()
```

#기말고사1-(3)

```{python}
#| title: 속력별 경로시각화
df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)


pcol = ['pickup_longitude','pickup_latitude']
dcol = ['dropoff_longitude','dropoff_latitude']

dfs = df_small.copy()
def transform(df):
  pickup = df.loc[:,['id','speed'] + pcol].set_axis(['id','speed','longitude','latitude'],axis=1).assign(type='pickup')
  dropoff = df.loc[:,['id','speed'] + dcol].set_axis(['id','speed','longitude','latitude'],axis=1).assign(type='dropoff')
  return pd.concat([pickup,dropoff],axis=0)
tidydata = pd.concat([transform(df) for i,df in dfs.groupby('id')],axis=0).reset_index(drop=True)

speed_cut = pd.qcut(tidydata.speed,4,labels=['매우느림','조금느림','조금빠름','매우빠름'])
tidydata.speed = speed_cut
tidydata = tidydata.rename({'speed':'speed_cut'},axis=1).sort_values('speed_cut').reset_index(drop=True)

df_left = dfs.drop(pcol+dcol,axis=1)
df_right = tidydata
tidydata1 = df_right.merge(df_left)


fig3 = px.line_mapbox(
    data_frame=tidydata1,
    lat = 'latitude',
    lon = 'longitude',
    color = 'speed_cut',
    line_group = 'id',
    center = {'lat':40.7322, 'lon':-73.9052},
    #---#
    mapbox_style = 'carto-positron',
    zoom=10,
    width = 750,
    height = 600
)
scatter_data = px.scatter_mapbox(
    data_frame=tidydata1,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 10,
    color = 'speed_cut',
    #---#
    mapbox_style = 'carto-positron',
    zoom=10,
    width = 750,
    height = 600
).data
for sd in scatter_data:
    fig3.add_trace(sd)
fig3.update_traces(
    line={
        'width':1
    },
    opacity=0.8,
)
fig3.layout['legend']['title']['text'] = '평균속력'

for i in range(150):
    if (fig3.data[i]['mode']=='lines') and (fig3.data[i]['name']=='조금빠름'):
        fig3.data[i]['name']='조금빠름(path)'
    elif (fig3.data[i]['mode']=='lines') and (fig3.data[i]['name']=='매우빠름'):
        fig3.data[i]['name']='조금빠름(path)'
    elif (fig3.data[i]['mode']=='lines') and (fig3.data[i]['name']=='조금느림'):
        fig3.data[i]['name']='조금느림(path)'
    elif (fig3.data[i]['mode']=='lines') and (fig3.data[i]['name']=='매우느림'):
        fig3.data[i]['name']='매우느림(path)'
    elif (fig3.data[i]['mode']=='markers') and (fig3.data[i]['name']=='조금빠름'):
        fig3.data[i]['name']='조금빠름(pickup/dropoff)'
    elif (fig3.data[i]['mode']=='markers') and (fig3.data[i]['name']=='매우빠름'):
        fig3.data[i]['name']='매우빠름(pickup/dropoff)'
    elif (fig3.data[i]['mode']=='markers') and (fig3.data[i]['name']=='조금느림'):
        fig3.data[i]['name']='조금느림(pickup/dropoff)'
    elif (fig3.data[i]['mode']=='markers') and (fig3.data[i]['name']=='매우느림'):
        fig3.data[i]['name']='매우느림(pickup/dropoff)'


fig3.show(config={"scrollZoom":False})
```